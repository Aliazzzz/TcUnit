<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="FB_AssertEveryFailedTestTwice_ArrayVersion" Id="{5b8060b0-3687-4b9b-9022-5637e5f78c2d}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    In this testsuite we are running the same testcase over two cycles, and thus calling
    every assert method twice. This is in order to verify that we don't print every FAILED assert twice.
    With this version we are doing it with arrays.
*)
{attribute 'call_after_init'}
FUNCTION_BLOCK FB_AssertEveryFailedTestTwice_ArrayVersion EXTENDS TcUnit.FB_TestSuite IMPLEMENTS TcUnit.I_RunnableTestSuite
VAR
    Assert : TcUnit.FB_Assert;
    AssertCount : USINT := 0;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{d32461c7-8d43-4868-9664-2bd48ee63185}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[SUPER^.RegisterTestSuite(THIS^);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTests" Id="{b3f2739f-e8f5-44ac-8d94-90c5524e1b97}">
      <Declaration><![CDATA[METHOD RunTests : TCUNIT.E_TestSuiteRunState
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TwiceAssertCall_Arrays();

AssertCount := AssertCount + 1;
IF AssertCount = 2 THEN
    RunTests := TCUNIT.E_TestSuiteRunState.FINISHED;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="TwiceAssertCall_Arrays" Id="{3223af5e-9433-428f-b1bd-3d3746f6e73f}">
      <Declaration><![CDATA[METHOD PRIVATE TwiceAssertCall_Arrays
VAR
    aBOOL : ARRAY[0..5] OF BOOL := [TRUE, TRUE, FALSE, TRUE, FALSE, TRUE];
    bBOOL : ARRAY[0..5] OF BOOL := [TRUE, TRUE, TRUE, TRUE, FALSE, FALSE];

    aBYTE : ARRAY[0..3] OF BYTE := [16#AB, 16#AA, 16#BB, 16#89];
    bBYTE : ARRAY[0..3] OF BYTE := [16#AB, 16#CD, 16#BB, 16#89];

    aDINT : ARRAY[3..5] OF DINT := [-4746, -2147483645, 0];
    bDINT : ARRAY[3..5] OF DINT := [-4746, -2147483641, 0];

    aDWORD : ARRAY[-2..1] OF DWORD := [16#6789ABCD, 16#EFAA2346, 16#ABABABAB, 16#EEEEEEEE];
    bDWORD : ARRAY[-2..1] OF DWORD := [16#6789ABCD, 16#EF012345, 16#ABABABAB, 16#EEEEEEEE];

    aINT : ARRAY[-8..-6] OF INT := [42, -23, -32768];
    bINT : ARRAY[1..3] OF INT := [42, 24, -32768];

    aLINT : ARRAY[-1..1] OF LINT := [9_223_372_036_854_775_807, -9_223_372_036_853_775_808, 55];
    bLINT : ARRAY[4..6] OF LINT := [9_223_372_036_854_775_807, -9_223_372_036_854_775_808, 55];

    aLWORD : ARRAY[1..1] OF LWORD := [16#EDCBA09876543210];
    bLWORD : ARRAY[1..1] OF LWORD := [16#01234567890ABCDE];

    aSINT : ARRAY[0..0] OF SINT := [-128];
    bSINT : ARRAY[0..0] OF SINT := [127];

    aUDINT : ARRAY[-5..-4] OF UDINT := [4294967295, 5];
    bUDINT : ARRAY[0..1] OF UDINT := [4294967295, 4];

    aUINT : ARRAY[0..3] OF UINT := [0, 4, 8, 99];
    bUINT : ARRAY[0..3] OF UINT := [0, 4, 8, 12];

    aULINT : ARRAY[0..1] OF ULINT := [3_213_000_444_000, 9_400_000_000_000];
    bULINT : ARRAY[0..1] OF ULINT := [3_213_000_444_000, 18_446_744_073_709_551_615];

    aUSINT : ARRAY[0..10] OF USINT := [0,1,2,3,6(4),5];
    bUSINT : ARRAY[0..10] OF USINT := [0,1,2,3,6(5),6];

    aWORD : ARRAY[1..7] OF WORD := [16#2323, 16#876A, 16#4CD4, 16#F3DC, 16#BBBB, 16#FFFF, 16#1133];
    bWORD : ARRAY[1..7] OF WORD := [16#2323, 16#876A, 16#4CD4, 16#F3DC, 16#BBBB, 16#FFFF, 16#1122];
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('TwiceAssertCall_Arrays');
                    
Assert.AssertArrayEquals_BOOL(Expecteds := aBOOL,
                              Actuals := bBOOL,
                              Message := 'Not equal BOOL');

Assert.AssertArrayEquals_BYTE(Expecteds := aBYTE,
                              Actuals := bBYTE,
                              Message := 'Not equal BYTE');

Assert.AssertArrayEquals_DINT(Expecteds := aDINT,
                              Actuals := bDINT,
                              Message := 'Not equal DINT');

Assert.AssertArrayEquals_DWORD(Expecteds := aDWORD,
                               Actuals := bDWORD,
                               Message := 'Not equal DWORD');

Assert.AssertArrayEquals_INT(Expecteds := aINT,
                             Actuals := bINT,
                             Message := 'Not equal INT');

Assert.AssertArrayEquals_LINT(Expecteds := aLINT,
                              Actuals := bLINT,
                              Message := 'Not equal LINT');

Assert.AssertArrayEquals_LWORD(Expecteds := aLWORD,
                               Actuals := bLWORD,
                               Message := 'Not equal LWORD');

Assert.AssertArrayEquals_SINT(Expecteds := aSINT,
                              Actuals := bSINT,
                              Message := 'Not equal SINT');

Assert.AssertArrayEquals_UDINT(Expecteds := aUDINT,
                               Actuals := bUDINT,
                               Message := 'Not equal UDINT');

Assert.AssertArrayEquals_UINT(Expecteds := aUINT,
                              Actuals := bUINT,
                              Message := 'Not equal UINT');

Assert.AssertArrayEquals_ULINT(Expecteds := aULINT,
                               Actuals := bULINT,
                               Message := 'Not equal ULINT');

Assert.AssertArrayEquals_USINT(Expecteds := aUSINT,
                               Actuals := bUSINT,
                               Message := 'Not equal USINT');

Assert.AssertArrayEquals_WORD(Expecteds := aWORD,
                              Actuals := bWORD,
                              Message := 'Not equal WORD');]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_AssertEveryFailedTestTwice_ArrayVersion">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_AssertEveryFailedTestTwice_ArrayVersion.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_AssertEveryFailedTestTwice_ArrayVersion.RunTests">
      <LineId Id="51" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="57" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="59" Count="0" />
    </LineIds>
    <LineIds Name="FB_AssertEveryFailedTestTwice_ArrayVersion.TwiceAssertCall_Arrays">
      <LineId Id="5" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="25" Count="1" />
      <LineId Id="24" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="31" Count="0" />
      <LineId Id="49" Count="2" />
      <LineId Id="48" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="93" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="98" Count="1" />
      <LineId Id="97" Count="0" />
      <LineId Id="100" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="111" Count="1" />
      <LineId Id="110" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="119" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="128" Count="2" />
      <LineId Id="127" Count="0" />
      <LineId Id="132" Count="2" />
      <LineId Id="131" Count="0" />
      <LineId Id="135" Count="0" />
      <LineId Id="137" Count="1" />
      <LineId Id="136" Count="0" />
      <LineId Id="140" Count="2" />
      <LineId Id="139" Count="0" />
      <LineId Id="144" Count="2" />
      <LineId Id="143" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>