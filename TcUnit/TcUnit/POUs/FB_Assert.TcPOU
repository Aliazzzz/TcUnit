<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_Assert" Id="{6d47daa2-fba1-435c-bae3-f81b2b35f9e8}" SpecialFunc="None">
    <Declaration><![CDATA[(*
DESCRIPTION: This function block is responsible for providing all the assert-methods for
             asserting different data types.
*)
{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Assert
VAR
    iAssertResults : I_AssertResult := GVL.fbAssertResultStatic;
    fbMessagePrinter : FB_MessagePrinter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddTestNameToInstancePath" Id="{abecfe2f-b0e2-4118-a1c6-bb248556b776}">
      <Declaration><![CDATA[METHOD PRIVATE AddTestNameToInstancePath : Tc2_Utilities.T_MaxString
VAR_INPUT
	sTestInstancePath : Tc2_Utilities.T_MaxString;
END_VAR
VAR
	sCompleteTestInstancePath : T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sCompleteTestInstancePath := Tc2_Utilities.CONCAT(STR1 := sTestInstancePath, STR2 := '@');
AddTestNameToInstancePath := Tc2_Utilities.CONCAT(STR1 := sCompleteTestInstancePath, STR2 := GVL.sCurrentTestNameBeingCalled);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals" Id="{092092ee-35b6-45cc-a1ac-e428e5d747ba}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals
VAR_INPUT
    Expected : ANY;
    Actual : ANY;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
    nCount : DINT;
    bDataTypesNotEquals : BOOL := FALSE;
    bDataSizeNotEquals : BOOL := FALSE;
    bDataContentNotEquals : BOOL := FALSE;
    sExpectedDataString : STRING(80);
    sActualDataString : STRING(80);
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF Expected.TypeClass <> Actual.TypeClass THEN
    bDataTypesNotEquals := TRUE;
END_IF

IF NOT bDataTypesNotEquals THEN
    IF (Expected.diSize <> Actual.diSize) THEN
        bDataSizeNotEquals := TRUE;
	END_IF
END_IF

IF NOT bDataTypesNotEquals AND NOT bDataTypesNotEquals THEN
    // Compare each byte in the ANY-types
    FOR nCount := 0 TO Expected.diSize-1 BY 1 DO
        IF Expected.pValue[nCount] <> Actual.pValue[nCount] THEN
            bDataContentNotEquals := TRUE;
            EXIT;
	    END_IF
    END_FOR
END_IF

IF bDataTypesNotEquals THEN
    sExpectedDataString := Tc2_Standard.CONCAT('(Type class = ', F_AnyTypeClassToString((Expected.TypeClass)));
    sExpectedDataString := Tc2_Standard.CONCAT(sExpectedDataString, ')');
    sActualDataString := Tc2_Standard.CONCAT('(Type class = ', F_AnyTypeClassToString(Actual.TypeClass));
    sActualDataString := Tc2_Standard.CONCAT(sActualDataString, ')');
ELSIF bDataSizeNotEquals THEN
    sExpectedDataString := Tc2_Standard.CONCAT('Data size = ', DINT_TO_STRING(Expected.diSize));
    sExpectedDataString := Tc2_Standard.CONCAT(sExpectedDataString, ')');
    sActualDataString := Tc2_Standard.CONCAT('Data size = ', DINT_TO_STRING(Actual.diSize));
    sActualDataString := Tc2_Standard.CONCAT(sActualDataString, ')');
ELSIF bDataContentNotEquals THEN
    FOR nCount := 0 TO MIN(Expected.diSize-1, 38) BY 1 DO // One byte will equal two characters (example: 255 = 0xff, 1 = 0x01)
        sExpectedDataString := Tc2_Standard.CONCAT(STR1 := sExpectedDataString,
                                                   STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Expected.pValue[nCount],
                                                                                        iPrecision := 2,
                                                                                        bLoCase := FALSE));
	END_FOR
    sExpectedDataString := Tc2_Standard.CONCAT(STR1 := '0x', STR2 := sExpectedDataString);

    FOR nCount := 0 TO MIN(Actual.diSize-1, 38) BY 1 DO // One byte will equal two characters (example: 255 = 0xff, 1 = 0x01)
        sActualDataString := Tc2_Standard.CONCAT(STR1 := sActualDataString,
                                                 STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Actual.pValue[nCount],
                                                                                      iPrecision := 2,
                                                                                      bLoCase := FALSE));
	END_FOR
    sActualDataString := Tc2_Standard.CONCAT(STR1 := '0x', STR2 := sActualDataString);
END_IF

IF bDataTypesNotEquals OR bDataSizeNotEquals OR bDataContentNotEquals THEN
    fbMessagePrinter.LogMessageError(sExpected := sExpectedDataString,
                                     sActual := sActualDataString,
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{0c41b405-ea35-4450-93cc-7c3349bdf754}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_BOOL
VAR_INPUT
    bExpected : BOOL;
    bActual : BOOL;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
    bAlreadyReported : BOOL;
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

iAssertResults.ReportResult_BOOL(bExpected, bActual, sMessage, sTestInstancePath,
                                    bAlreadyReported => bAlreadyReported);
IF NOT bAlreadyReported AND bExpected <> bActual THEN
    fbMessagePrinter.LogMessageError(sExpected := BOOL_TO_STRING(bExpected),
                                     sActual := BOOL_TO_STRING(bActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{c039f3f1-9c41-4f5e-93a3-393ce160979a}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_BYTE
VAR_INPUT
    nExpected : BYTE;
    nActual : BYTE;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := Tc2_Standard.CONCAT(
                                                         STR1 := '0x',
                                                         STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := nExpected,
                                                                                              iPrecision := 2,
                                                                                              bLoCase := FALSE)),
                                     sActual := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := nActual,
                                                                                            iPrecision := 2,
                                                                                            bLoCase := FALSE)),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{b7177b75-64df-4021-85c6-c366f61f5f89}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_DINT
VAR_INPUT
    nExpected : DINT;
    nActual : DINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := DINT_TO_STRING(nExpected),
                                     sActual := DINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DWORD" Id="{3ce6ba77-0ab2-46fc-a7c9-978b376b93be}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_DWORD
VAR_INPUT
    nExpected : DWORD;
    nActual : DWORD;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := Tc2_Standard.CONCAT(
                                                         STR1 := '0x',
                                                         STR2 := Tc2_Utilities.DWORD_TO_HEXSTR(in := nExpected,
                                                                                               iPrecision := 8,
                                                                                               bLoCase := FALSE)),
                                     sActual := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.DWORD_TO_HEXSTR(in := nActual,
                                                                                             iPrecision := 8,
                                                                                             bLoCase := FALSE)),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{7c61106e-9bcd-4577-a949-ab96d8862e41}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_INT
VAR_INPUT
    nExpected : INT;
    nActual : INT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := INT_TO_STRING(nExpected),
                                     sActual := INT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{9dc34017-cbc7-41a9-83a2-941f39cc7271}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_LINT
VAR_INPUT
    nExpected : LINT;
    nActual : LINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := LINT_TO_STRING(nExpected),
                                     sActual := LINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{205d107c-0a2d-44f7-b68a-eb06720b6a6b}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_LREAL
VAR_INPUT
    fExpected : LREAL;
    fActual : LREAL;
    fDelta : LREAL; // the maximum delta between expected and actual for which both numbers are still considered equal
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF ABS(fExpected - fActual) > fDelta THEN
    fbMessagePrinter.LogMessageError(sExpected := LREAL_TO_STRING(fExpected),
                                     sActual := LREAL_TO_STRING(fActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LWORD" Id="{08b090fb-911b-49fa-a51a-7f5edfd3dd2c}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_LWORD
VAR_INPUT
    nExpected : WORD;
    nActual : WORD;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := Tc2_Standard.CONCAT(
                                                         STR1 := '0x',
                                                         STR2 := Tc2_Utilities.LWORD_TO_HEXSTR(in := nExpected,
                                                                                              iPrecision := 16,
                                                                                              bLoCase := FALSE)),
                                     sActual := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.LWORD_TO_HEXSTR(in := nActual,
                                                                                             iPrecision := 16,
                                                                                             bLoCase := FALSE)),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{fba4feaf-27d0-4f8b-9014-3895f7bb9cc7}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_REAL
VAR_INPUT
    fExpected : REAL;
    fActual : REAL;
    fDelta : REAL; // the maximum delta between expected and actual for which both numbers are still considered equal
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF ABS(fExpected - fActual) > fDelta THEN
    fbMessagePrinter.LogMessageError(sExpected := REAL_TO_STRING(fExpected),
                                     sActual := REAL_TO_STRING(fActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_SINT" Id="{10052dfe-cfcb-4a5a-aa97-151e272ce217}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_SINT
VAR_INPUT
    nExpected : SINT;
    nActual : SINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := SINT_TO_STRING(nExpected),
                                     sActual := SINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{cad7fed3-5db3-4371-9240-856c3c740489}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_STRING
VAR_INPUT
    sExpected : STRING;
    sActual : STRING;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF (Tc2_Standard.LEN(sExpected) <> Tc2_Standard.LEN(sActual) OR (sExpected <> sActual)) THEN
    fbMessagePrinter.LogMessageError(sExpected := sExpected,
                                     sActual := sActual,
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{9c21e8db-62d7-4e5c-8e00-cd508f4f5abc}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_UDINT
VAR_INPUT
    nExpected : UDINT;
    nActual : UDINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := UDINT_TO_STRING(nExpected),
                                     sActual := UDINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{86b960b9-ebc0-46af-91ed-94a423f501dc}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_UINT
VAR_INPUT
    nExpected : UINT;
    nActual : UINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := UINT_TO_STRING(nExpected),
                                     sActual := UINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{6f1e7566-33c3-4f9c-b92d-7828feb26211}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_ULINT
VAR_INPUT
    nExpected : ULINT;
    nActual : ULINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := ULINT_TO_STRING(nExpected),
                                     sActual := ULINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_USINT" Id="{7f12117a-f0ab-475b-ba47-c8a5c801a9ac}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_USINT
VAR_INPUT
    nExpected : USINT;
    nActual : USINT;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
    bAlreadyReported : BOOL;
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

iAssertResults.ReportResult_USINT(nExpected, nActual, sMessage, sTestInstancePath,
                                  bAlreadyReported => bAlreadyReported);
IF NOT bAlreadyReported AND nExpected <> nActual THEN
	// Log test as failed
	SetTestFailed();
	
    fbMessagePrinter.LogMessageError(sExpected := USINT_TO_STRING(nExpected),
                                     sActual := USINT_TO_STRING(nActual),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_USINT_ARRAY" Id="{735445c1-1ceb-4a2f-ac18-dfb62e637ab6}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_USINT_ARRAY
VAR_IN_OUT
    aExpected : ARRAY[*] OF USINT;
    aActual : ARRAY[*] OF USINT;
END_VAR
VAR_INPUT
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
    bEquals : BOOL := TRUE;
    bSizeEquals : BOOL := TRUE;
    nIndex : DINT;
    sExpectedString : STRING;
    sActualString : STRING;
	sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF (LOWER_BOUND(aExpected, 1) <> LOWER_BOUND(aActual, 1)) OR
   (UPPER_BOUND(aExpected, 1) <> UPPER_BOUND(aActual, 1)) THEN
    bEquals := FALSE;
    bSizeEquals := FALSE;
ELSE
    FOR nIndex := LOWER_BOUND(aExpected, 1) TO UPPER_BOUND(aExpected, 1) DO
        IF aExpected[nIndex] <> aActual[nIndex] THEN
            bEquals := FALSE;
            EXIT;
	    END_IF
    END_FOR
END_IF

IF NOT bEquals THEN
    IF NOT bSizeEquals THEN
        sMessage := CONCAT(STR1 := sMessage, ', size of arrays not matching');
    ELSE
        sExpectedString := 'ARRAY[';
        sExpectedString := CONCAT(sExpectedString, DINT_TO_STRING(nIndex));
        sExpectedString := CONCAT(sExpectedString, '] = ');
        sExpectedString := CONCAT(sExpectedString, USINT_TO_STRING(aExpected[nIndex]));

        sActualString := 'ARRAY[';
        sActualString := CONCAT(sActualString, DINT_TO_STRING(nIndex));
        sActualString := CONCAT(sActualString, '] = ');
        sActualString := CONCAT(sActualString, USINT_TO_STRING(aActual[nIndex]));
	END_IF

    fbMessagePrinter.LogMessageError(sExpected := sExpectedString,
                                     sActual := sActualString,
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_WORD" Id="{85132cdb-0553-4070-be9a-976fcddd873d}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_WORD
VAR_INPUT
    nExpected : WORD;
    nActual : WORD;
    sMessage : Tc2_System.T_MaxString;
END_VAR
VAR
    sTestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[sTestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF nExpected <> nActual THEN
    fbMessagePrinter.LogMessageError(sExpected := Tc2_Standard.CONCAT(
                                                         STR1 := '0x',
                                                         STR2 := Tc2_Utilities.WORD_TO_HEXSTR(in := nExpected,
                                                                                              iPrecision := 4,
                                                                                              bLoCase := FALSE)),
                                     sActual := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.WORD_TO_HEXSTR(in := nActual,
                                                                                            iPrecision := 4,
                                                                                            bLoCase := FALSE)),
                                     sMessage := sMessage,
                                     sTestInstancePath := sTestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertFalse" Id="{022665a8-9003-4aaa-8ef4-bd39fe196883}">
      <Declaration><![CDATA[METHOD PUBLIC AssertFalse
VAR_INPUT
    bActual : BOOL;
    sMessage : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertEquals_BOOL(FALSE, bActual, sMessage);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertTrue" Id="{c415013c-c271-42ba-83ad-6c2c653d8f2e}">
      <Declaration><![CDATA[METHOD PUBLIC AssertTrue
VAR_INPUT
    bActual : BOOL;
    sMessage : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertEquals_BOOL(TRUE, bActual, sMessage);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindTestFunctionBlockInstancePath" Id="{e69a4510-81a2-4d65-94e4-52c06ac49944}">
      <Declaration><![CDATA[(* Searches for the instance path of the calling function block *)
METHOD PRIVATE FindTestFunctionBlockInstancePath : Tc2_System.T_MaxString
VAR
	nCounter : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR nCounter := 1 TO GVL.nInitializedTestFunctionBlocks BY 1 DO
	IF GVL.pTestFunctionBlockAssertAddressess[nCounter] = ADR(THIS^) THEN
		FindTestFunctionBlockInstancePath := GVL.pTestFunctionBlockAddressess[nCounter].GetInstancePath();
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{7dec091f-f80e-4d1e-9483-df790a0c62ee}">
      <Declaration><![CDATA[{attribute 'call_after_init'}
METHOD PRIVATE Initialize]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.bTestFunctionBlockAssertRegistered THEN
	(* If this assert function block has not been initialized, we can safely assume that we will have 
	   a test function block initialized after this initialization, as a test-FB will initialize the assert-FB *)
	GVL.pTestFunctionBlockAssertAddressess[GVL.nInitializedTestFunctionBlocks+1] := ADR(THIS^);
	GVL.bTestFunctionBlockAssertRegistered := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTestFailed" Id="{c2757184-608e-481d-a06c-8cfa6484c04d}">
      <Declaration><![CDATA[METHOD PRIVATE SetTestFailed
VAR
	nCounter : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR nCounter := 1 TO GVL.nInitializedTestFunctionBlocks BY 1 DO
	IF GVL.pTestFunctionBlockAssertAddressess[nCounter] = ADR(THIS^) THEN
		GVL.pTestFunctionBlockAddressess[nCounter].SetTestFailed(GVL.sCurrentTestNameBeingCalled);
	END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AddTestNameToInstancePath">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals">
      <LineId Id="117" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="54" Count="4" />
      <LineId Id="53" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="94" Count="4" />
      <LineId Id="93" Count="0" />
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_BOOL">
      <LineId Id="36" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_BYTE">
      <LineId Id="33" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_DINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_DWORD">
      <LineId Id="29" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_INT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LREAL">
      <LineId Id="25" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LWORD">
      <LineId Id="29" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_REAL">
      <LineId Id="25" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_SINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_STRING">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_UDINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_UINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_ULINT">
      <LineId Id="24" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_USINT">
      <LineId Id="31" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="2" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_USINT_ARRAY">
      <LineId Id="92" Count="0" />
      <LineId Id="108" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="39" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="30" Count="0" />
      <LineId Id="32" Count="1" />
      <LineId Id="35" Count="3" />
      <LineId Id="26" Count="0" />
      <LineId Id="41" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="66" Count="7" />
      <LineId Id="65" Count="0" />
      <LineId Id="49" Count="0" />
      <LineId Id="56" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="74" Count="2" />
      <LineId Id="43" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_WORD">
      <LineId Id="29" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertFalse">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertTrue">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.FindTestFunctionBlockInstancePath">
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.Initialize">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.SetTestFailed">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>