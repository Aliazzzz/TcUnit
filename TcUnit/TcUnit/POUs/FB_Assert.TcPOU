<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_Assert" Id="{6d47daa2-fba1-435c-bae3-f81b2b35f9e8}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This function block is responsible for providing all the assert-methods for
    asserting different data types. Only failed assertions are recorded.
*)
{attribute 'call_after_init'}
FUNCTION_BLOCK FB_Assert
VAR
    AssertResults : FB_AssertResultStatic := GVL.AssertResultStatic;

    (* Prints the failed asserts to ADS so that Visual Studio can display the assert message.
       This assert formatter can be replaced with something else than ADS *)
    ADSAssertMessageFormatter : FB_ADSAssertMessageFormatter;
    AssertMessageFormatter : I_AssertMessageFormatter := ADSAssertMessageFormatter;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddTestNameToInstancePath" Id="{abecfe2f-b0e2-4118-a1c6-bb248556b776}">
      <Declaration><![CDATA[METHOD PRIVATE AddTestNameToInstancePath : Tc2_Utilities.T_MaxString
VAR_INPUT
    TestInstancePath : Tc2_Utilities.T_MaxString;
END_VAR
VAR
    CompleteTestInstancePath : Tc2_Utilities.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[CompleteTestInstancePath := Tc2_Utilities.CONCAT(STR1 := TestInstancePath, STR2 := '@');
AddTestNameToInstancePath := Tc2_Utilities.CONCAT(STR1 := CompleteTestInstancePath, STR2 := GVL.CurrentTestNameBeingCalled);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals" Id="{092092ee-35b6-45cc-a1ac-e428e5d747ba}">
      <Declaration><![CDATA[(*
    Asserts that two objects (of any type) are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals
VAR_INPUT
    Expected : ANY; // Expected value
    Actual : ANY; // The value to check against expected
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    Count : DINT;
    DataTypesNotEquals : BOOL := FALSE;
    DataSizeNotEquals : BOOL := FALSE;
    DataContentNotEquals : BOOL := FALSE;
    ExpectedDataString : STRING(80);
    ActualDataString : STRING(80);
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF Expected.TypeClass <> Actual.TypeClass THEN
    DataTypesNotEquals := TRUE;
END_IF

IF NOT DataTypesNotEquals THEN
    IF (Expected.diSize <> Actual.diSize) THEN
        DataSizeNotEquals := TRUE;
    END_IF
END_IF

IF NOT DataTypesNotEquals AND NOT DataTypesNotEquals THEN
    // Compare each byte in the ANY-types
    FOR Count := 0 TO Expected.diSize-1 BY 1 DO
        IF Expected.pValue[Count] <> Actual.pValue[Count] THEN
            DataContentNotEquals := TRUE;
            EXIT;
        END_IF
    END_FOR
END_IF

IF DataTypesNotEquals THEN
    ExpectedDataString := Tc2_Standard.CONCAT('(Type class = ', F_AnyTypeClassToString((Expected.TypeClass)));
    ExpectedDataString := Tc2_Standard.CONCAT(ExpectedDataString, ')');
    ActualDataString := Tc2_Standard.CONCAT('(Type class = ', F_AnyTypeClassToString(Actual.TypeClass));
    ActualDataString := Tc2_Standard.CONCAT(ActualDataString, ')');
ELSIF DataSizeNotEquals THEN
    ExpectedDataString := Tc2_Standard.CONCAT('Data size = ', DINT_TO_STRING(Expected.diSize));
    ExpectedDataString := Tc2_Standard.CONCAT(ExpectedDataString, ')');
    ActualDataString := Tc2_Standard.CONCAT('Data size = ', DINT_TO_STRING(Actual.diSize));
    ActualDataString := Tc2_Standard.CONCAT(ActualDataString, ')');
ELSIF DataContentNotEquals THEN
    FOR Count := 0 TO MIN(Expected.diSize-1, 38) BY 1 DO // One byte will equal two characters (example: 255 = 0xff, 1 = 0x01)
        ExpectedDataString := Tc2_Standard.CONCAT(STR1 := ExpectedDataString,
                                                  STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Expected.pValue[Count],
                                                                                       iPrecision := 2,
                                                                                       bLoCase := FALSE));
    END_FOR
    ExpectedDataString := Tc2_Standard.CONCAT(STR1 := '0x', STR2 := ExpectedDataString);

    FOR Count := 0 TO MIN(Actual.diSize-1, 38) BY 1 DO // One byte will equal two characters (example: 255 = 0xff, 1 = 0x01)
        ActualDataString := Tc2_Standard.CONCAT(STR1 := ActualDataString,
                                                STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Actual.pValue[Count],
                                                                                     iPrecision := 2,
                                                                                     bLoCase := FALSE));
    END_FOR
    ActualDataString := Tc2_Standard.CONCAT(STR1 := '0x', STR2 := ActualDataString);
END_IF

IF DataTypesNotEquals OR DataSizeNotEquals OR DataContentNotEquals THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := ExpectedDataString,
                                            Actual := ActualDataString,
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BOOL" Id="{0c41b405-ea35-4450-93cc-7c3349bdf754}">
      <Declaration><![CDATA[(*
    Asserts that two BOOLs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_BOOL
VAR_INPUT
    Expected : BOOL; // BOOL expected value
    Actual : BOOL; // BOOL actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    AlreadyReported : BOOL;
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := BOOL_TO_STRING(Expected),
                                            Actual := BOOL_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_BYTE" Id="{c039f3f1-9c41-4f5e-93a3-393ce160979a}">
      <Declaration><![CDATA[(*
    Asserts that two BYTEs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_BYTE
VAR_INPUT
    Expected : BYTE; // BYTE expected value
    Actual : BYTE; // BYTE actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Expected,
                                                                                            iPrecision := 2,
                                                                                            bLoCase := FALSE)),
                                            Actual := Tc2_Standard.CONCAT(
                                                       STR1 := '0x',
                                                       STR2 := Tc2_Utilities.BYTE_TO_HEXSTR(in := Actual,
                                                                                            iPrecision := 2,
                                                                                            bLoCase := FALSE)),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DINT" Id="{b7177b75-64df-4021-85c6-c366f61f5f89}">
      <Declaration><![CDATA[(*
    Asserts that two DINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_DINT
VAR_INPUT
    Expected : DINT; // DINT expected value
    Actual : DINT; // DINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := DINT_TO_STRING(Expected),
                                            Actual := DINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_DWORD" Id="{3ce6ba77-0ab2-46fc-a7c9-978b376b93be}">
      <Declaration><![CDATA[(*
    Asserts that two DWORDs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_DWORD
VAR_INPUT
    Expected : DWORD; // DWORD expected value
    Actual : DWORD; // DWORD actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := Tc2_Standard.CONCAT(
                                                            STR1 := '0x',
                                                            STR2 := Tc2_Utilities.DWORD_TO_HEXSTR(in := Expected,
                                                                                                  iPrecision := 8,
                                                                                                  bLoCase := FALSE)),
                                            Actual := Tc2_Standard.CONCAT(
                                                           STR1 := '0x',
                                                           STR2 := Tc2_Utilities.DWORD_TO_HEXSTR(in := Actual,
                                                                                                 iPrecision := 8,
                                                                                                 bLoCase := FALSE)),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_INT" Id="{7c61106e-9bcd-4577-a949-ab96d8862e41}">
      <Declaration><![CDATA[(*
    Asserts that two INTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_INT
VAR_INPUT
    Expected : INT; // INT expected value
    Actual : INT; // INT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := INT_TO_STRING(Expected),
                                            Actual := INT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LINT" Id="{9dc34017-cbc7-41a9-83a2-941f39cc7271}">
      <Declaration><![CDATA[(*
    Asserts that two LINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_LINT
VAR_INPUT
    Expected : LINT; // LINT expected value
    Actual : LINT; // LINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := LINT_TO_STRING(Expected),
                                            Actual := LINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LREAL" Id="{205d107c-0a2d-44f7-b68a-eb06720b6a6b}">
      <Declaration><![CDATA[(*
    Asserts that two LREALs are equal to within a positive delta. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_LREAL
VAR_INPUT
    Expected : LREAL; // LREAL expected value
    Actual : LREAL; // LREAL actual value
    Delta : LREAL; // The maximum delta between the absolute value of expected and actual for which both numbers are still considered equal
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND ABS(Expected - Actual) > Delta THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := LREAL_TO_STRING(Expected),
                                            Actual := LREAL_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_LWORD" Id="{08b090fb-911b-49fa-a51a-7f5edfd3dd2c}">
      <Declaration><![CDATA[(*
    Asserts that two LWORDs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_LWORD
VAR_INPUT
    Expected : LWORD; // LWORD expected value
    Actual : LWORD; // LWORD actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := Tc2_Standard.CONCAT(
                                                            STR1 := '0x',
                                                            STR2 := Tc2_Utilities.LWORD_TO_HEXSTR(in := Expected,
                                                                                                  iPrecision := 16,
                                                                                                  bLoCase := FALSE)),
                                            Actual := Tc2_Standard.CONCAT(
                                                            STR1 := '0x',
                                                            STR2 := Tc2_Utilities.LWORD_TO_HEXSTR(in := Actual,
                                                                                                  iPrecision := 16,
                                                                                                  bLoCase := FALSE)),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_REAL" Id="{fba4feaf-27d0-4f8b-9014-3895f7bb9cc7}">
      <Declaration><![CDATA[(*
    Asserts that two REALs are equal to within a positive delta. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_REAL
VAR_INPUT
    Expected : REAL; // REAL expected value
    Actual : REAL; // REAL actual value
    Delta : REAL;  // The maximum delta between the absolute value of expected and actual for which both numbers are still considered equal
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND ABS(Expected - Actual) > Delta THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := REAL_TO_STRING(Expected),
                                            Actual := REAL_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_SINT" Id="{10052dfe-cfcb-4a5a-aa97-151e272ce217}">
      <Declaration><![CDATA[(*
    Asserts that two SINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_SINT
VAR_INPUT
    Expected : SINT; // SINT expected value
    Actual : SINT; // SINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := SINT_TO_STRING(Expected),
                                            Actual := SINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_STRING" Id="{cad7fed3-5db3-4371-9240-856c3c740489}">
      <Declaration><![CDATA[(*
    Asserts that two STRINGs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_STRING
VAR_INPUT
    Expected : Tc2_System.T_MaxString; // STRING expected value
    Actual : Tc2_System.T_MaxString; // STRING actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND (Tc2_Standard.LEN(Expected) <> Tc2_Standard.LEN(Actual) OR (Expected <> Actual)) THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := Expected,
                                            Actual := Actual,
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UDINT" Id="{9c21e8db-62d7-4e5c-8e00-cd508f4f5abc}">
      <Declaration><![CDATA[(*
    Asserts that two UDINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_UDINT
VAR_INPUT
    Expected : UDINT; // UDINT expected value
    Actual : UDINT; // UDINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := UDINT_TO_STRING(Expected),
                                            Actual := UDINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_UINT" Id="{86b960b9-ebc0-46af-91ed-94a423f501dc}">
      <Declaration><![CDATA[(*
    Asserts that two UINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_UINT
VAR_INPUT
    Expected : UINT; // UINT expected value
    Actual : UINT; // UINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := UINT_TO_STRING(Expected),
                                            Actual := UINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_ULINT" Id="{6f1e7566-33c3-4f9c-b92d-7828feb26211}">
      <Declaration><![CDATA[(*
    Asserts that two ULINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_ULINT
VAR_INPUT
    Expected : ULINT; // ULINT expected value
    Actual : ULINT; // ULINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := ULINT_TO_STRING(Expected),
                                            Actual := ULINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_USINT" Id="{7f12117a-f0ab-475b-ba47-c8a5c801a9ac}">
      <Declaration><![CDATA[(*
    Asserts that two USINTs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_USINT
VAR_INPUT
    Expected : USINT; // USINT expected value
    Actual : USINT; // USINT actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    AlreadyReported : BOOL;
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := USINT_TO_STRING(Expected),
                                            Actual := USINT_TO_STRING(Actual),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_USINT_ARRAY" Id="{735445c1-1ceb-4a2f-ac18-dfb62e637ab6}">
      <Declaration><![CDATA[METHOD PUBLIC AssertEquals_USINT_ARRAY
VAR_IN_OUT
    Expected : ARRAY[*] OF USINT;
    Actual : ARRAY[*] OF USINT;
END_VAR
VAR_INPUT
    Message : Tc2_System.T_MaxString;
END_VAR
VAR
    Equals : BOOL := TRUE;
    SizeEquals : BOOL := TRUE;
    Index : DINT;
    ExpectedString : STRING;
    ActualString : STRING;
    AlreadyReported : BOOL;
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

IF (LOWER_BOUND(Expected, 1) <> LOWER_BOUND(Actual, 1)) OR
   (UPPER_BOUND(Expected, 1) <> UPPER_BOUND(Actual, 1)) THEN
    Equals := FALSE;
    SizeEquals := FALSE;
ELSE
    FOR Index := LOWER_BOUND(Expected, 1) TO UPPER_BOUND(Expected, 1) DO
        IF Expected[Index] <> Actual[Index] THEN
            Equals := FALSE;
            EXIT;
        END_IF
    END_FOR
END_IF

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND NOT Equals THEN
    SetTestFailed();
    
    IF NOT SizeEquals THEN
        Message := CONCAT(STR1 := Message, ', size of arrays not matching.');
    ELSE
        ExpectedString := 'ARRAY[';
        ExpectedString := CONCAT(ExpectedString, DINT_TO_STRING(Index));
        ExpectedString := CONCAT(ExpectedString, '] = ');
        ExpectedString := CONCAT(ExpectedString, USINT_TO_STRING(Expected[Index]));

        ActualString := 'ARRAY[';
        ActualString := CONCAT(ActualString, DINT_TO_STRING(Index));
        ActualString := CONCAT(ActualString, '] = ');
        ActualString := CONCAT(ActualString, USINT_TO_STRING(Actual[Index]));
    END_IF

    AssertMessageFormatter.LogAssertFailure(Expected := ExpectedString,
                                            Actual := ActualString,
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertEquals_WORD" Id="{85132cdb-0553-4070-be9a-976fcddd873d}">
      <Declaration><![CDATA[(*
    Asserts that two WORDs are equal. If they are not, an assertion error is created.
*)
METHOD PUBLIC AssertEquals_WORD
VAR_INPUT
    Expected : WORD; // WORD expected value
    Actual : WORD; // WORD actual value
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR
VAR
    TestInstancePath : Tc2_System.T_MaxString;
    AlreadyReported : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TestInstancePath := AddTestNameToInstancePath(FindTestFunctionBlockInstancePath());

AssertResults.ReportResult(Expected := Expected,
                           Actual := Actual,
                           Message := Message,
                           TestInstancePath := TestInstancePath,
                           AlreadyReported => AlreadyReported);

IF NOT AlreadyReported AND Expected <> Actual THEN
    SetTestFailed();

    AssertMessageFormatter.LogAssertFailure(Expected := Tc2_Standard.CONCAT(
                                                            STR1 := '0x',
                                                            STR2 := Tc2_Utilities.WORD_TO_HEXSTR(in := Expected,
                                                                                                 iPrecision := 4,
                                                                                                 bLoCase := FALSE)),
                                            Actual := Tc2_Standard.CONCAT(
                                                            STR1 := '0x',
                                                            STR2 := Tc2_Utilities.WORD_TO_HEXSTR(in := Actual,
                                                                                                 iPrecision := 4,
                                                                                                 bLoCase := FALSE)),
                                            Message := Message,
                                            TestInstancePath := TestInstancePath);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertFalse" Id="{022665a8-9003-4aaa-8ef4-bd39fe196883}">
      <Declaration><![CDATA[(*
    Asserts that a condition is false. If it is not, an assertion error is created.
*)
METHOD PUBLIC AssertFalse
VAR_INPUT
    Condition : BOOL; // Condition to be checked
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertEquals_BOOL(FALSE, Condition, Message);]]></ST>
      </Implementation>
    </Method>
    <Method Name="AssertTrue" Id="{c415013c-c271-42ba-83ad-6c2c653d8f2e}">
      <Declaration><![CDATA[(*
    Asserts that a condition is true. If it is not, an assertion error is created.
*)
METHOD PUBLIC AssertTrue
VAR_INPUT
    Condition : BOOL; // Condition to be checked
    Message : Tc2_System.T_MaxString; // The identifying message for the assertion error
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[AssertEquals_BOOL(TRUE, Condition, Message);]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindTestFunctionBlockInstancePath" Id="{e69a4510-81a2-4d65-94e4-52c06ac49944}">
      <Declaration><![CDATA[(* Searches for the instance path of the calling function block *)
METHOD PRIVATE FindTestFunctionBlockInstancePath : Tc2_System.T_MaxString
VAR
    Counter : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR Counter := 1 TO GVL.AmountOfInitializedTestFunctionBlocks BY 1 DO
    IF GVL.TestFunctionBlockAssertAddressess[Counter] = ADR(THIS^) THEN
        FindTestFunctionBlockInstancePath := GVL.TestFunctionBlockAddressess[Counter].GetInstancePath();
    END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{7dec091f-f80e-4d1e-9483-df790a0c62ee}">
      <Declaration><![CDATA[{attribute 'call_after_init'}
METHOD PRIVATE Initialize]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT GVL.TestFunctionBlockAssertRegistered THEN
    (* If this assert function block has not been initialized, we can safely assume that we will have 
       a test function block initialized after this initialization, as a test-FB will initialize the assert-FB *)
    GVL.TestFunctionBlockAssertAddressess[GVL.AmountOfInitializedTestFunctionBlocks+1] := ADR(THIS^);
    GVL.TestFunctionBlockAssertRegistered := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTestFailed" Id="{c2757184-608e-481d-a06c-8cfa6484c04d}">
      <Declaration><![CDATA[METHOD PRIVATE SetTestFailed
VAR
    Counter : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR Counter := 1 TO GVL.AmountOfInitializedTestFunctionBlocks BY 1 DO
    IF GVL.TestFunctionBlockAssertAddressess[Counter] = ADR(THIS^) THEN
        GVL.TestFunctionBlockAddressess[Counter].SetTestFailed(GVL.CurrentTestNameBeingCalled);
    END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Assert">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AddTestNameToInstancePath">
      <LineId Id="5" Count="0" />
      <LineId Id="8" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals">
      <LineId Id="117" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="68" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="69" Count="0" />
      <LineId Id="71" Count="1" />
      <LineId Id="70" Count="0" />
      <LineId Id="75" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="25" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="19" Count="0" />
      <LineId Id="24" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="85" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="86" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="50" Count="2" />
      <LineId Id="49" Count="0" />
      <LineId Id="59" Count="1" />
      <LineId Id="54" Count="4" />
      <LineId Id="53" Count="0" />
      <LineId Id="61" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="94" Count="1" />
      <LineId Id="132" Count="1" />
      <LineId Id="96" Count="2" />
      <LineId Id="93" Count="0" />
      <LineId Id="99" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_BOOL">
      <LineId Id="36" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="56" Count="3" />
      <LineId Id="25" Count="0" />
      <LineId Id="60" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="12" Count="2" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_BYTE">
      <LineId Id="33" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="53" Count="3" />
      <LineId Id="52" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_DINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_DWORD">
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_INT">
      <LineId Id="24" Count="0" />
      <LineId Id="42" Count="0" />
      <LineId Id="44" Count="3" />
      <LineId Id="43" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LREAL">
      <LineId Id="25" Count="0" />
      <LineId Id="45" Count="0" />
      <LineId Id="47" Count="3" />
      <LineId Id="46" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="61" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_LWORD">
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_REAL">
      <LineId Id="25" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="51" Count="3" />
      <LineId Id="45" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="65" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_SINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_STRING">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_UDINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_UINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_ULINT">
      <LineId Id="24" Count="0" />
      <LineId Id="43" Count="4" />
      <LineId Id="42" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="57" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_USINT">
      <LineId Id="31" Count="0" />
      <LineId Id="51" Count="0" />
      <LineId Id="73" Count="3" />
      <LineId Id="41" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="15" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_USINT_ARRAY">
      <LineId Id="92" Count="0" />
      <LineId Id="176" Count="0" />
      <LineId Id="178" Count="10" />
      <LineId Id="177" Count="0" />
      <LineId Id="164" Count="4" />
      <LineId Id="161" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="162" Count="0" />
      <LineId Id="189" Count="0" />
      <LineId Id="204" Count="0" />
      <LineId Id="192" Count="11" />
      <LineId Id="191" Count="0" />
      <LineId Id="190" Count="0" />
      <LineId Id="173" Count="2" />
      <LineId Id="170" Count="1" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertEquals_WORD">
      <LineId Id="29" Count="0" />
      <LineId Id="48" Count="4" />
      <LineId Id="47" Count="0" />
      <LineId Id="38" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="18" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="19" Count="1" />
      <LineId Id="13" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="10" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertFalse">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.AssertTrue">
      <LineId Id="12" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.FindTestFunctionBlockInstancePath">
      <LineId Id="33" Count="0" />
      <LineId Id="35" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="36" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.Initialize">
      <LineId Id="10" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="14" Count="0" />
    </LineIds>
    <LineIds Name="FB_Assert.SetTestFailed">
      <LineId Id="6" Count="3" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>