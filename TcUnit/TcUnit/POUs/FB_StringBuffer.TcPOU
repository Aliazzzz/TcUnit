<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_StringBuffer" Id="{e52f4441-8a0a-4101-967b-b7eab2a848a9}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This functionblock acts as an IO stream buffer for use with FB_XmlControl
*)
{attribute 'hide_all_locals'}
FUNCTION_BLOCK FB_StringBuffer 
VAR
    pString : POINTER TO BYTE;
    udiLength : UDINT;
    udiSizeOf : UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Append" Id="{1420d8a5-f130-452c-8825-a3f354a987ec}">
      <Declaration><![CDATA[// Appends a string to the buffer
PROPERTY Append : Tc2_System.T_MaxString]]></Declaration>
      <Set Name="Set" Id="{0b19b506-e9b9-4278-a6d8-4293484e7c2a}">
        <Declaration><![CDATA[VAR
    pByteIn : POINTER TO BYTE;
    pByteBuffer : POINTER TO BYTE;
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[pByteIn := ADR(Append); 
pByteBuffer := pString + udiLength;
WHILE pByteIn^ <> 0 AND(udiLength < udiSizeOf ) DO
    pByteBuffer^ := pByteIn^;
    udiLength := udiLength + 1;
    pByteIn := pByteIn + 1;
    pByteBuffer := pByteBuffer + 1;
END_WHILE;

pByteBuffer := pString + udiLength; (* String End *)
pByteBuffer^ := 0;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="BufferSize" Id="{68afd1a2-de65-4e12-b73f-fea349e03e95}">
      <Declaration><![CDATA[// Read current Buffersize
PROPERTY BufferSize : UDINT]]></Declaration>
      <Get Name="Get" Id="{50c00d93-002d-4d51-b127-116588bc6b70}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[BufferSize := udiSizeOf;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="Copy" Id="{2c390f42-4281-4b36-9491-cb075b58b84f}">
      <Declaration><![CDATA[(*
    Copies a string from the character buffer
*)
METHOD Copy : Tc2_System.T_MaxString
VAR_INPUT
    udiStart : UDINT;
    udiEnd : UDINT;
END_VAR
VAR_OUTPUT
    udiCopyLen : UDINT;
    XmlError : E_XmlError;
END_VAR
VAR
    udiLoop : UDINT;
    pByteCopy : POINTER TO BYTE;
    pByteBuffer : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[udiLoop := 0;
pByteCopy := ADR(Copy);
pByteBuffer := pString + udiStart - 1;

WHILE(udiLoop < SIZEOF(Copy)) AND udiStart - 1 + udiLoop < udiLength AND udiStart + udiLoop < udiEnd DO
    pByteCopy^ := pByteBuffer^;
    udiLoop := udiLoop + 1;
    pByteCopy := ADR(Copy) + udiLoop;
    pByteBuffer := pString + udiStart + udiLoop -1;
END_WHILE;

IF udiLoop = SIZEOF(Copy) THEN
    XmlError := E_XmlError.ErrorStringLen;
ELSIF udiStart - 1 + udiLoop = udiLength THEN
    XmlError := E_XmlError.ErrorMaxBufferLen;
ELSE
    XmlError := E_XmlError.OK;
END_IF;

pByteCopy^ := 0;
udiCopyLen :=  udiLoop;]]></ST>
      </Implementation>
    </Method>
    <Method Name="CutOff" Id="{c6a3de4e-6324-4b78-aaa1-8f0f469c3e8a}">
      <Declaration><![CDATA[METHOD CutOff : STRING
VAR_INPUT
    udiStartPos : UDINT;
END_VAR
VAR_OUTPUT
    udiCutLen : UDINT; 
    XmlError : E_XmlError;
END_VAR
VAR
    iLoop : UDINT;
    pByteCut : POINTER TO BYTE;
    pByteBuffer : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[iLoop := 0;
pByteCut := ADR(CutOff);
pByteBuffer := pString + udiStartPos - 1;

WHILE pByteBuffer^ <> 0 AND(iLoop < SIZEOF(CutOff)) AND udiStartPos -1  + iLoop < udiLength DO
    pByteCut^ := pByteBuffer^;
    iLoop := iLoop + 1;
    pByteCut := ADR(CutOff) + iLoop;
    pByteBuffer := pString + udiStartPos - 1 + iLoop;
END_WHILE;

IF pByteBuffer^ = 0 THEN
    XmlError := E_XmlError.OK;
ELSIF iLoop = SIZEOF(CutOff) THEN
    XmlError := E_XmlError.ErrorStringLen;
ELSIF udiStartPos -1 + iLoop = udiLength THEN
    XmlError := E_XmlError.ErrorMaxBufferLen;
END_IF;

pByteCut^ := 0;
udiLength := udiStartPos -1;

pByteBuffer := pString + udiStartPos - 1;
pByteBuffer^ := 0;

udiCutLen := iLoop;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Find" Id="{005c59da-78f6-44f5-992f-5ed00155aa65}">
      <Declaration><![CDATA[(* 
    Find a searchstring in the buffer and returns its position.
    It's possible to add a preffered startposition within buffer
*)
METHOD Find : UDINT
VAR_INPUT
    sSearchString : STRING;
    udiStartPos : UDINT;
END_VAR
VAR
    udiLoop : UDINT;
    iSearch : UDINT;
    pBuffer : POINTER TO BYTE;
    pSearch : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[udiLoop := 0;
iSearch := 0;

pBuffer := pString + udiStartPos;
pSearch := ADR( sSearchString);

WHILE(pSearch^ <> 0 ) AND udiLoop + udiStartPos < udiLength DO
    IF pBuffer^ <> pSearch^ THEN
        udiLoop := udiLoop + 1;
        pBuffer := pString + udiStartPos + udiLoop;
        pSearch := ADR( sSearchString);
        iSearch := 0;
    ELSE
        iSearch := iSearch +1;
        pBuffer := pString + udiStartPos + udiLoop + iSearch;
        pSearch := ADR( sSearchString ) + iSearch;
    END_IF;
END_WHILE;
Find := udiLoop + 1 + udiStartPos;]]></ST>
      </Implementation>
    </Method>
    <Method Name="FindBack" Id="{9839d1e8-50a3-46d6-bcc3-683d35336c78}">
      <Declaration><![CDATA[METHOD FindBack : UDINT
VAR_INPUT
    sSearchString : Tc2_System.T_MaxString;
END_VAR
VAR
    udiLoop : UDINT;
    udiSearch : UDINT;
    pBuffer : POINTER TO BYTE;
    pSearch : POINTER TO BYTE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[udiLoop := 0;
udiSearch := 0;

pBuffer := pString + udiLength;
pSearch := ADR( sSearchString);

WHILE(pSearch^ <> 0 ) AND udiLoop < udiLength DO
    IF pBuffer^ <> pSearch^ THEN
        udiLoop := udiLoop + 1;
        pBuffer := pString + udiLength - udiLoop;
        pSearch := ADR( sSearchString);
        udiSearch := 0;
    ELSE
        udiSearch := udiSearch +1;
        pBuffer := pString + udiLength - udiLoop + udiSearch;
        pSearch := ADR( sSearchString ) + udiSearch;
    END_IF;
END_WHILE;
FindBack :=  udiLength - udiLoop + 1;]]></ST>
      </Implementation>
    </Method>
    <Property Name="Length" Id="{4091adec-4bb4-4fd6-8526-9c7c148f5fb6}">
      <Declaration><![CDATA[PROPERTY Length : UDINT
]]></Declaration>
      <Get Name="Get" Id="{68d61c18-5880-4fca-bc19-2627561e031b}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := udiLength;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{771e0e96-6938-4002-9e95-f5464d90932a}">
        <Declaration><![CDATA[]]></Declaration>
        <Implementation>
          <ST><![CDATA[udiLength := Length;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="Set" Id="{4febb494-7fac-41a4-adad-f24be4f91872}">
      <Declaration><![CDATA[(* Sets the Buffer *)
METHOD Set : BOOL;
VAR_INPUT
    // Set buffer adress (ADR ...)
    pbyAdr : POINTER TO BYTE;
    // Set buffer size (SIZEOF ...)
    udiSize : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (pbyAdr = 0)OR (udiSize = 0) THEN
    Set := FALSE;
    RETURN;
END_IF;

udiSizeOf := udiSize;
pString := pbyAdr;

Set := TRUE;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>