<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_TcUnitRunner" Id="{857e16d6-a26c-468a-935e-aa7317c263b9}" SpecialFunc="None">
    <Declaration><![CDATA[(*
    This function block is responsible for holding track of the tests and executing them.
*)
FUNCTION_BLOCK FB_TcUnitRunner
VAR
    (* Indication of whether all test suites have reported that they are finished *)
    AllTestSuitesFinished : BOOL := FALSE;

    (* Prints the results to ADS so that Visual Studio can display the results.
       This test result formatter can be replaced with something else than ADS *)
    AdsTestResultLogger : FB_AdsTestResultLogger;
    TestResultLogger : I_TestResultLogger := AdsTestResultLogger;

    (* These variables (statistics) are occupied once all tests are complete *)
    NumberOfTestSuitesFinished : UINT := 0;
    NumberOfTestCases : UINT := 0;
    NumberOfFailedTestCases : UINT := 0;
    NumberOfSuccessfulTestCases : UINT := 0;

    (* If this flag is set, it means that some external event triggered the
       request to abort running the test suites *)
    AbortRunningTestSuites : BOOL;

    (* This flag is set once the final end result has printed *)
    DonePrintingEndResult : BOOL := FALSE;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AbortRunningTestSuiteTests" Id="{3fcbd569-749a-493c-a697-2c976fa6e96a}">
      <Declaration><![CDATA[(* This function sets a flag which makes the runner stop running the tests
   in the test suites *)
METHOD PUBLIC AbortRunningTestSuiteTests]]></Declaration>
      <Implementation>
        <ST><![CDATA[AbortRunningTestSuites := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="RunTestSuiteTests" Id="{d333e6c4-a1da-4b5b-91b3-4b4808e6c299}">
      <Declaration><![CDATA[METHOD RunTestSuiteTests
VAR
    Counter : UINT := 0;
    BusyPrinting : BOOL;

    (* We need to hold a temporary state of the statistics (failed, successful, total number of test cases etc)
       as we don't consider the tests to be completely finished until all test suites have executed completely.
       The reason we want to do it this way is because a test suite can run over several cycles. Only once all tests
       are finished (which might take many cycles), do we gather correct statistics *)
    NumberOfTestSuitesFinished_Temp : UINT := 0;
    NumberOfTestCases_Temp : UINT := 0;
    NumberOfFailedTestCases_Temp : UINT := 0;
    NumberOfSuccessfulTestCases_Temp : UINT := 0;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT AllTestSuitesFinished THEN
    IF GVL_TcUnit.NumberOfInitializedTestSuites = 0 THEN
        AllTestSuitesFinished := TRUE;
    ELSIF GVL_TcUnit.NumberOfInitializedTestSuites > 0 THEN
        FOR Counter := 1 TO GVL_TcUnit.NumberOfInitializedTestSuites BY 1 DO
            IF GVL_TcUnit.TestSuiteAddresses[Counter]^.AreAllTestsFinished() THEN
                NumberOfTestSuitesFinished_Temp := NumberOfTestSuitesFinished_Temp + 1;
                NumberOfTestCases_Temp := GVL_TcUnit.TestSuiteAddresses[Counter]^.GetNumberOfTests() + NumberOfTestCases_Temp;
                NumberOfFailedTestCases_Temp := GVL_TcUnit.TestSuiteAddresses[Counter]^.GetNumberOfFailedTests() + NumberOfFailedTestCases_Temp;
                NumberOfSuccessfulTestCases_Temp := GVL_TcUnit.TestSuiteAddresses[Counter]^.GetNumberOfSuccessfulTests() + NumberOfSuccessfulTestCases_Temp;
            ELSE
                GVL_TcUnit.CurrentTestSuiteBeingCalled := GVL_TcUnit.TestSuiteAddresses[Counter];
                GVL_TcUnit.CurrentTestSuiteBeingCalled^();
            END_IF
        END_FOR
        (* Check if some event triggered an abortion of running the tests, in that case abort it now.
           This can be accomplished by setting the result of the test suites run to finished. *)
        IF AbortRunningTestSuites THEN
            NumberOfTestSuitesFinished_Temp := GVL_TcUnit.NumberOfInitializedTestSuites;
		END_IF
        IF NumberOfTestSuitesFinished_Temp = GVL_TcUnit.NumberOfInitializedTestSuites THEN
            (* Copy the final results over *)
            NumberOfTestSuitesFinished := NumberOfTestSuitesFinished_Temp;
            NumberOfTestCases := NumberOfTestCases_Temp;
            NumberOfFailedTestCases := NumberOfFailedTestCases_Temp;
            NumberOfSuccessfulTestCases := NumberOfSuccessfulTestCases_Temp;
            AllTestSuitesFinished := TRUE;
        END_IF
    END_IF
END_IF

(* Log test suite results as continuously *)
TestResultLogger.LogTestSuiteResults();

(* Log end results once all test suites have finished running *)
IF AllTestSuitesFinished THEN
    IF NOT DonePrintingEndResult THEN
        TestResultLogger.LogEndResult(NumberOfTestSuites := NumberOfTestSuitesFinished,
                                      NumberOfTestCases := NumberOfTestCases,
                                      NumberOfSuccessfulTestCases := NumberOfSuccessfulTestCases,
                                      NumberOfFailedTestCases := NumberOfFailedTestCases);
        DonePrintingEndResult := TRUE;
    END_IF                                  
END_IF

(* Run the buffered ADS logger *)
GVL_TcUnit.AdsMessageQueue();]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TcUnitRunner">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_TcUnitRunner.AbortRunningTestSuiteTests">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TcUnitRunner.RunTestSuiteTests">
      <LineId Id="131" Count="0" />
      <LineId Id="128" Count="1" />
      <LineId Id="10" Count="1" />
      <LineId Id="69" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="83" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="21" Count="0" />
      <LineId Id="55" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="19" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="213" Count="0" />
      <LineId Id="217" Count="0" />
      <LineId Id="214" Count="2" />
      <LineId Id="23" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="166" Count="2" />
      <LineId Id="165" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="12" Count="0" />
      <LineId Id="132" Count="0" />
      <LineId Id="250" Count="0" />
      <LineId Id="248" Count="0" />
      <LineId Id="247" Count="0" />
      <LineId Id="249" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="232" Count="0" />
      <LineId Id="137" Count="2" />
      <LineId Id="136" Count="0" />
      <LineId Id="231" Count="0" />
      <LineId Id="233" Count="0" />
      <LineId Id="144" Count="0" />
      <LineId Id="198" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="199" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>