<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.16">
  <POU Name="FB_TestSuite" Id="{f80c23f2-119d-406b-ae11-06d1991bf64d}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function block is responsible for holding the internal state of the test suite.
   Every test suite can have one or more tests, and every test can do one or more asserts.
*)
{attribute 'call_after_init'}
{attribute 'reflection'}
FUNCTION_BLOCK FB_TestSuite IMPLEMENTS I_TestSuite
VAR
    {attribute 'instance-path'}
    {attribute 'noinit'}
    InstancePath : Tc2_System.T_MaxString;

    (* This is a interface-pointer to the child object that inherits this object
       in order for us to have a reference to calling the actual execution of the tests *) 
    _RunnableTestSuite : I_RunnableTestSuite;

    (* We need to have access to specific information of the current task that this test suite
       is executed in. This is for instance necessary when we need to know whether a test is
       defined already. The definition of a test that is defined already is that we call on it
       with the same name twice in the same cycle *)
    GetCurrentTaskIndex : Tc2_System.GETCURTASKINDEX;

    NumberOfTests : UINT := 0;
    Tests : ARRAY[1..GVL_Constants.MaxAmountOfTestsForEachTestSuite] OF FB_Test;
    (* Rising trigger of whether we have already notified the user of that the test name pointed to by the current
       position is a duplicate *)
    TestDuplicateNameTrigger : ARRAY[1..GVL_Constants.MaxAmountOfTestsForEachTestSuite] OF Tc2_Standard.R_TRIG;
    (* Last cycle count index for a specific test. Used to detect whether this test has already been run defined in the
       current test suite *)
    TestCycleCountIndex : ARRAY[1..GVL_Constants.MaxAmountOfTestsForEachTestSuite] OF UDINT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddTest" Id="{d383011f-6bea-4b05-9018-ea4782ad2837}">
      <Declaration><![CDATA[METHOD PUBLIC AddTest
VAR_INPUT
    TestName : T_MaxString;
END_VAR
VAR
    IteratorCounter : UINT;
    ErrorMessage : Tc2_System.T_MaxString;
    TestInstancePath : Tc2_System.T_MaxString;
    FunctionCallResult : DINT;
    CycleCount : UDINT;
    TestWithThisNameAlreadyExists : BOOL := FALSE;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetCurrentTaskIndex(); // Gets the task index of where this function block instance is being run in

(* Check if the test name already exists. Make sure there are no other tests with the same name already
   added for this test suite *)

CycleCount := TwinCAT_SystemInfoVarList._TaskInfo[GetCurrentTaskIndex.index].CycleCount;

(* Iterate all the test names that up to this point have been added for this test suite *)
FOR IteratorCounter := 1 TO NumberOfTests BY 1 DO
    IF Tests[IteratorCounter].GetName() = TestName THEN
        TestWithThisNameAlreadyExists := TRUE;
        (* Check if a test with this name has already been called in this cycle *)
        IF TestCycleCountIndex[IteratorCounter] = CycleCount THEN
            (* A test with this name already exists for this test suite and has already been called in this cycle.
               Send a message notification, but only if we have not done so already. *)
            TestDuplicateNameTrigger[IteratorCounter](CLK := TRUE);
            IF TestDuplicateNameTrigger[IteratorCounter].Q THEN // Rising edge detected. We have not reported this before
                TestInstancePath := F_RemoveInstancePathAndProjectNameFromTestInstancePath(TestInstancePath :=
                                                                                           GVL.CurrentTestSuiteBeingCalled.GetInstancePath());
                ErrorMessage := 'Test with name $'%s$' already exists in test suite $'';
                ErrorMessage := Tc2_Standard.CONCAT(STR1 := ErrorMessage, STR2 := TestInstancePath);
                ErrorMessage := Tc2_Standard.CONCAT(STR1 := ErrorMessage, STR2 := '$'');
                FunctionCallResult := Tc2_System.ADSLOGSTR(msgCtrlMask := Tc2_System.ADSLOG_MSGTYPE_ERROR,
                                                           msgFmtStr := ErrorMessage,
                                                           strArg := TestName);
            END_IF
        END_IF
    END_IF
    TestCycleCountIndex[IteratorCounter] := CycleCount;
END_FOR

IF NOT TestWithThisNameAlreadyExists THEN
    (* Test has not been found. Add it. *)
    Tests[IteratorCounter].SetName(Name := TestName);
    NumberOfTests := NumberOfTests + 1;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAmountOfFailedTests" Id="{12e4522b-e67f-439a-af1d-8713231888aa}">
      <Declaration><![CDATA[METHOD PUBLIC GetAmountOfFailedTests : UINT
VAR
    Counter : UINT;
    FailedTestsCount : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NumberOfTests > 0 THEN
    FOR Counter := 1 TO GetAmountOfTests() BY 1 DO
        IF Tests[Counter].IsFailed() THEN
            FailedTestsCount := FailedTestsCount + 1;
        END_IF
    END_FOR
END_IF

GetAmountOfFailedTests := FailedTestsCount;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAmountOfSuccessfulTests" Id="{635213dc-96ca-4be6-9c0d-c0454c29d34d}">
      <Declaration><![CDATA[METHOD PUBLIC GetAmountOfSuccessfulTests : UINT]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAmountOfSuccessfulTests := GetAmountOfTests() - GetAmountOfFailedTests();]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetAmountOfTests" Id="{6f67c6d5-c29e-4577-8651-51bd6db3ab63}">
      <Declaration><![CDATA[METHOD PUBLIC GetAmountOfTests : UINT]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetAmountOfTests := NumberOfTests;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetInstancePath" Id="{178fa338-5ed3-417b-8f4d-e9f120ace4b9}">
      <Declaration><![CDATA[METHOD PUBLIC GetInstancePath : Tc2_System.T_MaxString
]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetInstancePath := InstancePath;]]></ST>
      </Implementation>
    </Method>
    <Method Name="GetRunnableTestSuite" Id="{42018cb6-0640-401b-9af0-45a257049175}">
      <Declaration><![CDATA[METHOD GetRunnableTestSuite : I_RunnableTestSuite]]></Declaration>
      <Implementation>
        <ST><![CDATA[GetRunnableTestSuite := _RunnableTestSuite;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{1c3645b8-e9b0-4963-8e9e-6ea2327dddf4}">
      <Declaration><![CDATA[{attribute 'call_after_init'}
METHOD PRIVATE Initialize]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* The reason we want to do a separate initialization of the function block outside of the normal
   FB_init is in order for  *)
IF GVL.TestSuiteAssertRegistered THEN
    GVL.AmountOfInitializedTestSuites := GVL.AmountOfInitializedTestSuites + 1;	
    GVL.TestSuiteAddresses[GVL.AmountOfInitializedTestSuites] := THIS^;
    GVL.TestSuiteAssertRegistered := FALSE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="RegisterTestSuite" Id="{5739bc4d-f91e-4513-b43f-1bc828337468}">
      <Declaration><![CDATA[METHOD PUBLIC RegisterTestSuite
VAR_INPUT
	RunnableTestSuite : I_RunnableTestSuite;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[_RunnableTestSuite := RunnableTestSuite;]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetTestFailed" Id="{79b1664f-2570-4cef-bd6e-d7307d9a7818}">
      <Declaration><![CDATA[METHOD PUBLIC SetTestFailed
VAR_INPUT
    TestName : Tc2_System.T_MaxString;
END_VAR
VAR
    IteratorCounter : UINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NumberOfTests > 0 THEN
    FOR IteratorCounter := 1 TO NumberOfTests BY 1 DO
        IF Tests[IteratorCounter].GetName() = TestName THEN
            Tests[IteratorCounter].SetFailed();
		END_IF
    END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_TestSuite">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.AddTest">
      <LineId Id="108" Count="0" />
      <LineId Id="110" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="130" Count="0" />
      <LineId Id="129" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="77" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="90" Count="0" />
      <LineId Id="142" Count="0" />
      <LineId Id="127" Count="0" />
      <LineId Id="125" Count="0" />
      <LineId Id="80" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="94" Count="0" />
      <LineId Id="93" Count="0" />
      <LineId Id="67" Count="0" />
      <LineId Id="95" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="41" Count="0" />
      <LineId Id="58" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="126" Count="0" />
      <LineId Id="122" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="143" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="91" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="144" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.GetAmountOfFailedTests">
      <LineId Id="10" Count="1" />
      <LineId Id="22" Count="0" />
      <LineId Id="13" Count="4" />
      <LineId Id="6" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.GetAmountOfSuccessfulTests">
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.GetAmountOfTests">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.GetInstancePath">
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.GetRunnableTestSuite">
      <LineId Id="4" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.Initialize">
      <LineId Id="30" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="24" Count="1" />
      <LineId Id="18" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.RegisterTestSuite">
      <LineId Id="11" Count="0" />
    </LineIds>
    <LineIds Name="FB_TestSuite.SetTestFailed">
      <LineId Id="5" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="22" Count="2" />
      <LineId Id="13" Count="0" />
      <LineId Id="11" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>