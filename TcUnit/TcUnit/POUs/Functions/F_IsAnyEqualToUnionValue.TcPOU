<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="F_IsAnyEqualToUnionValue" Id="{1ab30776-5b8c-4eb4-8ece-b0c087a9b905}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION F_IsAnyEqualToUnionValue : BOOL
VAR_INPUT
    uExpectedOrActual : U_ExpectedOrActual;
    ExpectedOrActualSize : UDINT;
    ExpectedOrActualTypeClass : IBaseLibrary.TypeClass;
    ExpectedOrActualValue : POINTER TO BYTE;
END_VAR
VAR
    AnyExpectedOrActual : U_ExpectedOrActual;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[AnyExpectedOrActual := F_AnyToUnionValue(AnySize := ExpectedOrActualSize,
                                         AnyTypeClass := ExpectedOrActualTypeClass,
                                         AnyValue := ExpectedOrActualValue);

CASE ExpectedOrActualTypeClass OF

    IBaseLibrary.TypeClass.TYPE_BOOL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.boolExpectedOrActual = AnyExpectedOrActual.boolExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BIT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.bitExpectedOrActual = AnyExpectedOrActual.bitExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BYTE :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.byteExpectedOrActual = AnyExpectedOrActual.byteExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_WORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.wordExpectedOrActual = AnyExpectedOrActual.wordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DWORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dwordExpectedOrActual = AnyExpectedOrActual.dwordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LWORD :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lwordExpectedOrActual = AnyExpectedOrActual.lwordExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_SINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.sintExpectedOrActual = AnyExpectedOrActual.sintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_INT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.intExpectedOrActual = AnyExpectedOrActual.intExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dintExpectedOrActual = AnyExpectedOrActual.dintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lintExpectedOrActual = AnyExpectedOrActual.lintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_USINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.usintExpectedOrActual = AnyExpectedOrActual.usintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_UINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.uintExpectedOrActual = AnyExpectedOrActual.uintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_UDINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.udintExpectedOrActual = AnyExpectedOrActual.udintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_ULINT :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.ulintExpectedOrActual = AnyExpectedOrActual.ulintExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_REAL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.realExpectedOrActual = AnyExpectedOrActual.realExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_LREAL :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.lrealExpectedOrActual = AnyExpectedOrActual.lrealExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_STRING :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.stringExpectedOrActual = AnyExpectedOrActual.stringExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_WSTRING :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.wstringExpectedOrActual = AnyExpectedOrActual.wstringExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_TIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.timeExpectedOrActual = AnyExpectedOrActual.timeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DATE :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dateExpectedOrActual = AnyExpectedOrActual.dateExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_DATEANDTIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.dateandtimeExpectedOrActual = AnyExpectedOrActual.dateandtimeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_TIMEOFDAY :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.timeofdayExpectedOrActual = AnyExpectedOrActual.timeofdayExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_POINTER :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_REFERENCE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_SUBRANGE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ENUM :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ARRAY :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_PARAMS :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_USERDEF :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_NONE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANY :
        (* Even though the data input of the ExpectedOrActual is ANY, this CASE-switch will never
           enter this case, but instead the type-class that it is an instance of. So for instance,
           if the ExpectedOrActual is an instance of INT, this case-switch will enter the 
           IBaseLibrary.TypeClass.TYPE_INT case. *)
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYBIT :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYDATE :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYINT :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYNUM :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_ANYREAL :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_LAZY :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_LTIME :
        F_IsAnyEqualToUnionValue := uExpectedOrActual.ltimeExpectedOrActual = AnyExpectedOrActual.ltimeExpectedOrActual;

    IBaseLibrary.TypeClass.TYPE_BITCONST :
        F_IsAnyEqualToUnionValue := FALSE;

    IBaseLibrary.TypeClass.TYPE_INTERFACE :
        F_IsAnyEqualToUnionValue := FALSE;

    ELSE
        F_IsAnyEqualToUnionValue := FALSE;
END_CASE]]></ST>
    </Implementation>
    <LineIds Name="F_IsAnyEqualToUnionValue">
      <LineId Id="209" Count="2" />
      <LineId Id="173" Count="0" />
      <LineId Id="7" Count="0" />
      <LineId Id="169" Count="0" />
      <LineId Id="12" Count="0" />
      <LineId Id="165" Count="0" />
      <LineId Id="164" Count="0" />
      <LineId Id="14" Count="1" />
      <LineId Id="118" Count="0" />
      <LineId Id="16" Count="1" />
      <LineId Id="117" Count="0" />
      <LineId Id="18" Count="1" />
      <LineId Id="116" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="115" Count="0" />
      <LineId Id="22" Count="0" />
      <LineId Id="109" Count="0" />
      <LineId Id="23" Count="2" />
      <LineId Id="120" Count="0" />
      <LineId Id="26" Count="0" />
      <LineId Id="121" Count="0" />
      <LineId Id="27" Count="1" />
      <LineId Id="174" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="175" Count="0" />
      <LineId Id="31" Count="1" />
      <LineId Id="176" Count="0" />
      <LineId Id="33" Count="1" />
      <LineId Id="177" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="178" Count="0" />
      <LineId Id="37" Count="1" />
      <LineId Id="179" Count="0" />
      <LineId Id="39" Count="1" />
      <LineId Id="180" Count="0" />
      <LineId Id="41" Count="1" />
      <LineId Id="181" Count="0" />
      <LineId Id="43" Count="1" />
      <LineId Id="182" Count="0" />
      <LineId Id="45" Count="1" />
      <LineId Id="183" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="48" Count="1" />
      <LineId Id="142" Count="0" />
      <LineId Id="50" Count="1" />
      <LineId Id="143" Count="0" />
      <LineId Id="52" Count="1" />
      <LineId Id="144" Count="0" />
      <LineId Id="54" Count="1" />
      <LineId Id="145" Count="0" />
      <LineId Id="56" Count="1" />
      <LineId Id="146" Count="0" />
      <LineId Id="58" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="60" Count="1" />
      <LineId Id="148" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="149" Count="0" />
      <LineId Id="64" Count="1" />
      <LineId Id="150" Count="0" />
      <LineId Id="66" Count="1" />
      <LineId Id="151" Count="0" />
      <LineId Id="68" Count="1" />
      <LineId Id="152" Count="0" />
      <LineId Id="70" Count="1" />
      <LineId Id="153" Count="0" />
      <LineId Id="72" Count="0" />
      <LineId Id="195" Count="3" />
      <LineId Id="73" Count="0" />
      <LineId Id="154" Count="0" />
      <LineId Id="74" Count="1" />
      <LineId Id="155" Count="0" />
      <LineId Id="76" Count="1" />
      <LineId Id="156" Count="0" />
      <LineId Id="78" Count="1" />
      <LineId Id="157" Count="0" />
      <LineId Id="80" Count="1" />
      <LineId Id="158" Count="0" />
      <LineId Id="82" Count="1" />
      <LineId Id="159" Count="0" />
      <LineId Id="84" Count="1" />
      <LineId Id="160" Count="0" />
      <LineId Id="86" Count="1" />
      <LineId Id="161" Count="0" />
      <LineId Id="88" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="163" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="10" Count="1" />
    </LineIds>
  </POU>
</TcPlcObject>