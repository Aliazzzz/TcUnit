<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_AssertResultStatic" Id="{9683a633-879e-475e-a97f-0742f9ecfd04}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_AssertResultStatic
VAR
    aAssertResults : ARRAY[1..cStartSizeOfArray] OF ST_AssertResult;
    nFailuresCount : UINT := 0;
    nSuccessCount : UINT := 0;
    nAssertTotalCount : UINT := 0;
END_VAR
VAR CONSTANT
    cStartSizeOfArray : UINT := 300;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="FindMessageAndTestInstancePathEquals" Id="{33a89dae-77cc-43e7-920d-ea254b349a40}">
      <Declaration><![CDATA[(* This method searches for any already added additions of the combination of
   assertion message and assertion instance paths. It returns the location of
   the addition. If it is not found, it returns 0.
*)
METHOD PRIVATE FindMessageAndTestInstancePathEquals : UDINT
VAR_INPUT
    Message : Tc2_System.T_MaxString;
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR
VAR
    nCounter : UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[FindMessageAndTestInstancePathEquals := 0;
IF nAssertTotalCount > 0 THEN
    FOR nCounter := 1 TO nAssertTotalCount BY 1 DO
        IF Message = aAssertResults[nCounter].Message AND
            TestInstancePath = aAssertResults[nCounter].TestInstancePath THEN
            FindMessageAndTestInstancePathEquals := nCounter;
            EXIT;
        END_IF
    END_FOR
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ReportResult" Id="{675e4dfe-54f1-4dc0-a6fd-481bc63973c5}">
      <Declaration><![CDATA[METHOD PUBLIC ReportResult
VAR_INPUT
    Expected : ANY;
    Actual : ANY;
    Message : Tc2_System.T_MaxString;
    TestInstancePath : Tc2_System.T_MaxString;
END_VAR
VAR_OUTPUT
    AlreadyReported : BOOL := FALSE;
END_VAR
VAR
    nLocation : UDINT;
    bDataTypesNotEquals : BOOL;
    bDataSizeNotEquals : BOOL;
    bDataContentNotEquals : BOOL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(* Check if we can find any existing match of the report.
   First check whether we can find the combination of test message and test instance path.
   If this combination is not found, we know for a fact that this report has not been included before and don't
   need to continue checking. If however the test message and instance path have been found, we need to check whether
   both the expected and actual values have been logged for this combination. Only if we have found the total
   combination of:
   - Test message
   - Test instance path
   - Expected value
   - Actual value
   We can consider to have a hit, otherwise we need to create it
*)

IF (nLocation := FindMessageAndTestInstancePathEquals(Message, TestInstancePath)) = 0 OR_ELSE
    (NOT F_IsAnyEqualToUnionValue(uExpectedOrActual := aAssertResults[nLocation].uExpected,
                                  ExpectedOrActual := Expected) OR
    NOT F_IsAnyEqualToUnionValue(uExpectedOrActual := aAssertResults[nLocation].uActual,
                                 ExpectedOrActual := Actual)) THEN

    (* No existing match found, create a new entry *)
    F_AnyComparator(AnyValueOne := Expected,
                    AnyValueTwo := Actual,
                    bDataTypesNotEquals => bDataTypesNotEquals,
                    bDataSizeNotEquals => bDataSizeNotEquals,
                    bDataContentNotEquals => bDataContentNotEquals);

    IF bDataTypesNotEquals OR bDataSizeNotEquals OR bDataContentNotEquals THEN
        GVL_AssertResult.nAssertFailuresCount := GVL_AssertResult.nAssertFailuresCount + 1;
    ELSE
        GVL_AssertResult.nAssertSuccessCount := GVL_AssertResult.nAssertSuccessCount + 1;
    END_IF
    nAssertTotalCount := nAssertTotalCount + 1;
    aAssertResults[nAssertTotalCount].uExpected := F_AnyToUnionValue(AnyValue := Expected);
    aAssertResults[nAssertTotalCount].uActual := F_AnyToUnionValue(AnyValue := Actual);
    aAssertResults[nAssertTotalCount].Message := Message;
    aAssertResults[nAssertTotalCount].TestInstancePath := TestInstancePath;
ELSE
    AlreadyReported := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_AssertResultStatic">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="FB_AssertResultStatic.FindMessageAndTestInstancePathEquals">
      <LineId Id="22" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="20" Count="1" />
      <LineId Id="14" Count="0" />
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_AssertResultStatic.ReportResult">
      <LineId Id="67" Count="0" />
      <LineId Id="260" Count="6" />
      <LineId Id="268" Count="0" />
      <LineId Id="267" Count="0" />
      <LineId Id="269" Count="1" />
      <LineId Id="259" Count="0" />
      <LineId Id="53" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="114" Count="0" />
      <LineId Id="117" Count="0" />
      <LineId Id="116" Count="0" />
      <LineId Id="242" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="118" Count="0" />
      <LineId Id="243" Count="0" />
      <LineId Id="125" Count="1" />
      <LineId Id="123" Count="1" />
      <LineId Id="68" Count="5" />
      <LineId Id="134" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="76" Count="0" />
      <LineId Id="63" Count="0" />
      <LineId Id="85" Count="1" />
      <LineId Id="64" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>